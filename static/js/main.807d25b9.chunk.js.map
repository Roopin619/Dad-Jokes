{"version":3,"sources":["Joke.js","JokesList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","getColor","props","votes","getEmoji","className","onClick","this","upvote","style","borderColor","downvote","text","Component","JokesList","getJokes","a","jokes","length","numJokesToGet","axios","get","headers","Accept","res","newJoke","data","joke","seenJokes","has","push","id","uuidv4","setState","st","loading","window","localStorage","setItem","JSON","stringify","state","alert","handleVote","delta","map","j","handleClick","parse","getItem","Set","console","log","sort","b","src","key","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.807d25b9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Joke.css';\n\nclass Joke extends Component {\n  getColor = () => {\n    if (this.props.votes >= 15) {\n      return \"#4CAF50\";\n    } else if (this.props.votes >= 12) {\n      return \"#8BC34A\";\n    } else if (this.props.votes >= 9) {\n      return \"#CDDC39\";\n    } else if (this.props.votes >= 6) {\n      return \"#FFEB3B\";\n    } else if (this.props.votes >= 3) {\n      return \"#FFC107\";\n    } else if (this.props.votes >= 0) {\n      return \"#FF9800\";\n    } else {\n      return \"#f44336\";\n    }\n  }\n  \n  getEmoji = () => {\n    if (this.props.votes >= 15) {\n      return \"em em-rolling_on_the_floor_laughing\";\n    } else if (this.props.votes >= 12) {\n      return \"em em-laughing\";\n    } else if (this.props.votes >= 9) {\n      return \"em em-smiley\";\n    } else if (this.props.votes >= 6) {\n      return \"em em-slightly_smiling_face\";\n    } else if (this.props.votes >= 3) {\n      return \"em em-neutral_face\";\n    } else if (this.props.votes >= 0) {\n      return \"em em-confused\";\n    } else {\n      return \"em em-angry\";\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Joke\">\n        <div className=\"Joke-buttons\">\n          <i className=\"fas fa-arrow-up\" onClick={this.props.upvote}></i>\n          <span className=\"Joke-votes\" style={{ borderColor: this.getColor() }}>{this.props.votes}</span>\n          <i className=\"fas fa-arrow-down\" onClick={this.props.downvote}></i>\n        </div>\n        <div className=\"Joke-text\">{this.props.text}</div>\n        <div className=\"Joke-smiley\">\n          <i className={this.getEmoji()}></i>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Joke;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport './JokesList.css';\nimport Joke from './Joke';\n\nclass JokesList extends Component {\n    static defaultProps = {\n        numJokesToGet: 10\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            jokes: JSON.parse(window.localStorage.getItem(\"jokes\") || \"[]\"),\n            loading: false\n        }\n        this.seenJokes = new Set(this.state.jokes.map(j => j.text));\n        console.log(this.seenJokes);\n\n    }\n\n    componentDidMount() {\n        if (this.state.jokes.length === 0) {\n            this.getJokes();\n        }\n    }\n\n    getJokes = async () => {\n        try {\n            let jokes = [];\n            while (jokes.length < this.props.numJokesToGet) {\n                let res = await axios.get('https://icanhazdadjoke.com/', {\n                    headers: { Accept: \"application/json\" }\n                });\n\n                let newJoke = res.data.joke;\n                if (!this.seenJokes.has(newJoke)) {\n                    jokes.push({ id: uuidv4(), text: newJoke, votes: 0 });\n                }\n            }\n\n            this.setState(st => ({\n                loading: false,\n                jokes: [...st.jokes, ...jokes]\n            }), () => window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\n            );\n\n        } catch (e) {\n            alert(e);\n            this.setState({ loading: false });\n        }\n    }\n\n    handleVote = (id, delta) => {\n        this.setState(st => ({\n            jokes: st.jokes.map(j => j.id === id ? { ...j, votes: j.votes + delta } : j)\n        }), () => window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\n        );\n    }\n\n    handleClick = () => {\n        this.setState({ loading: true }, this.getJokes);\n    }\n\n    render() {\n        if (this.state.loading) {\n            return (\n                <div className=\"JokesList-spinner\">\n                    <i className=\"far fa-6x fa-laugh fa-spin\" />\n                    <h1 className=\"JokesList-title\">Loading...</h1>\n                </div>\n            )\n        }\n\n        let jokes = this.state.jokes.sort((a, b) => b.votes - a.votes);\n        return (\n            <div className=\"JokesList\">\n                <div className=\"JokesList-sidebar\">\n                    <h1 className=\"JokesList-title\">\n                        <span>Dad</span> Jokes\n                    </h1>\n                    <img src='https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg' />\n                    <button className=\"JokesList-getmore\" onClick={this.handleClick}>Fetch Jokes</button>\n                </div>\n                <div className=\"JokesList-jokes\">\n                    {jokes.map(j => (\n                        <Joke\n                            key={j.id}\n                            votes={j.votes}\n                            text={j.text}\n                            upvote={() => this.handleVote(j.id, 1)}\n                            downvote={() => this.handleVote(j.id, -1)}\n                        />\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default JokesList;","import React from 'react';\nimport './App.css';\nimport JokesList from './JokesList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <JokesList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}